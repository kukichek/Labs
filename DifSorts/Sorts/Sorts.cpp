/*
Дан массив целых чисел a[n], n > 0. Разработать приложение, 
которое выполняет сортировку массива по возрастанию с помощью различных алгоритмов сортировки.
Зам. Алгоритмы сортировки, ввод и вывод массива, операцию обмена, оформить в виде отдельных функций.
1.	Выполнить сортировку элементов массива с помощью «сортировки выбором».
2.	Выполнить сортировку элементов массива с помощью «сортировки вставками».
3.	Выполнить сортировку элементов массива с помощью «сортировки пузырьком».
4.	Выполнить сортировку элементов массива с помощью «шейкерной сортировки».
5.	Выполнить сортировку элементов массива с помощью «чётно-нечётной сортировки».

Дополнить приложение, разработанное ранее функционалом для сравнения 
производительности работы алгоритмов сортировки:
-	оценить число операция сравнения и число операций обмена (перемещений) элементов 
(например, используйте глобальные переменные – счетчики, 
значение которых устанавливается в соответствующих функциях).
-	время работы алгоритмов сортировки.

1.	Разработайте функции для заполнения массива тестовыми данными. 
Проведите экспериментальное сравнение производительности работы алгоритмов сортировки 
(зам. сравнение алгоритмов должно проводится на одном и том же входе) 
для n = 10, 100, 1 000, 10 000 и следующем порядке входных элементов:
-	элементы упорядочены по возрастанию.
-	элементы упорядочены по убыванию.
-	случайный набор элементов.
2.	Результаты экспериментов оформить на основе нескольких запусков программы в 
виде сводных таблиц по образцу (см. Таблица 1).
3.	Оформите отчет по этой лабораторной работе в docx формате c описанием:
a.	разработанных алгоритмов сортировки,
b.	фрагментами кода алгоритмов,
c.	сводной таблицей результатов эксперимента сравнительного анализа алгоритмов.

Гамезо Валерия, 1 курс, информатика
*/

#include<iostream>
#include<fstream>
#include<ctime> 
#include"Sorts.h"
#define SIZE 10

using namespace std;

void inArray(int *a, int n) {
	ifstream fin("input.txt");
	for (int i = 0; i < n; ++i) {
		fin >> a[i];
	}
	return;
}

void outArray(int *a, int n) {
	for (int i = 0; i < n; ++i) {
		cout << a[i] << ' ';
	}
	cout << endl;
	return;
}

int main() {
	srand(time(NULL));
	double startTime, endTime;

	int a[SIZE];
	inArray(a, SIZE);

	cocktailSort(a, SIZE);

	outArray(a, SIZE);
	//cout << fixed << "Time it takes to sort an array is: " << endTime - startTime << endl;

	system("pause");

	return 0;
}